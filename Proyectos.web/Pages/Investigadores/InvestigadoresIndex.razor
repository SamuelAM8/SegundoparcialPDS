@page "/investigadores"
@using Proyectos.Shared.Entities
@using Proyectos.web.Repositories


@inject IRepository repository

@inject SweetAlertService sweetAlertService

@inject NavigationManager navigationManager



<div class="card">
    <div class="card-header">
        <span>
            <i class="bi bi-person" /> investigadores
            <a class="btn btn-primary btn-sm float-end" href="/investigadores/create"><i class="bi bi-plus-circle"/>New Investigator</a>

        </span>
</div>

    <div class="card-body">

<GenericList MyList="investigadores">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in investigadores!)
                {
                    <tr>
                        <td>
                                    <a href="/investigadores/edit/@item.Id" class="btn btn-sm btn-warning"><i class="bi bi-pencil-square" /> Editar</a>
                                    <button @onclick=@(() => DeleteAsycn(item)) class="btn btn-sm btn-danger"><i class="bi bi-trash-fill"/> Borrar</button>
                        </td>
                        
                        <td>
                            @item.Nombre
                        </td>
                        <td>
                            @item.Especialidad
                        </td>
                        <td>
                            @item.Afiliacion
                        </td>
                        


                        
                           
                        
                    </tr>
                }
            </tbody>
        </table>
    </Body>
 </GenericList>
    </div>
</div>

@code {
    public List<Investigadores>? investigadores { get; set; }





    protected override async Task OnInitializedAsync()

    {

        await LoadAsync();

    }



    private async Task LoadAsync()

    {

        var responseHttp = await repository.GetAsync<List<Investigadores>>("api/Investigadores");

        if (responseHttp.Error)

        {

            var message = await responseHttp.GetErrorMessageAsync();

            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);

            return;

        }

        investigadores = responseHttp.Response;

    }







    private async Task DeleteAsycn(Investigadores investigadores)

    {

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions

            {

                Title = "Confirmación",

                Text = $"¿Estas seguro de querer borrar el owner: {investigadores.Nombre}?",

                Icon = SweetAlertIcon.Question,

                ShowCancelButton = true,

            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)

        {

            return;

        }



        var responseHttp = await repository.DeleteAsync<Investigadores>($"api/Investigadores/{investigadores.Id}");

        if (responseHttp.Error)

        {

            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)

            {

                navigationManager.NavigateTo("investigadores");

            }

            else

            {

                var mensajeError = await responseHttp.GetErrorMessageAsync();

                await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);

            }

            return;

        }



        await LoadAsync();

        var toast = sweetAlertService.Mixin(new SweetAlertOptions

            {

                Toast = true,

                Position = SweetAlertPosition.BottomEnd,

                ShowConfirmButton = true,

                Timer = 3000

            });

        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Registro borrado con éxito.");

    }



}

}
